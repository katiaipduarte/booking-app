{"version":3,"sources":["store/store.ts","store/appointments/type.ts","store/appointments/reducer.ts","serviceWorker.ts","store/appointments/action.ts","components/Calendar/Calendar.tsx","styles/index.ts","components/DayCalendar/DayCalendar.tsx","App.tsx","utils/handle-request.ts","index.tsx","registerFaIcons.ts"],"names":["middleware","AppointmentsType","APPOINTMENTS_INITIAL_STATE","currentDate","moment","Date","format","appointments","appointmentReducer","state","action","type","payload","updated","map","i","mentor","calendar","combinedReducer","combineReducers","appointmentsState","store","createStore","thunk","applyMiddleware","Boolean","window","location","hostname","match","initAppointmentsList","mappedData","endDate","date_time","add","startDate","title","Calendar","props","useState","selectedDate","setSelectedDate","dispatch","useDispatch","value","onChange","e","date","GlobalStyle","createGlobalStyle","DayCalendar","useSelector","setAppointments","open","setOpen","useEffect","length","updateAppointments","appointment","overlaps","some","added","handleClose","Paper","Dialog","onClose","aria-labelledby","aria-describedby","DialogContent","DialogContentText","id","DialogActions","Button","onClick","color","autoFocus","data","onCommitChanges","editingAppointment","undefined","startDayHour","endDayHour","cellDuration","useStyles","makeStyles","theme","createStyles","root","flexGrow","paper","padding","spacing","textAlign","palette","text","secondary","App","classes","setMentor","initCalendar","a","fetch","process","method","then","res","response","ok","json","status","list","name","console","error","className","Grid","container","item","xs","md","createMuiTheme","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","library","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"mJAcwBA,E,kFCVXC,EACL,sBADKA,EAEH,wBAFGA,EAGD,0BAQCC,EAAgD,CAC3DC,YAAaC,IAAO,IAAIC,MAAQC,OAAO,cACvCC,aAAc,ICyBDC,EAjCwC,WAGjD,IAFJC,EAEG,uDAFwBP,EAC3BQ,EACG,uCACH,OAAQA,EAAOC,MACb,KAAKV,EACH,OAAO,2BACFQ,GADL,IAEEF,aAAcG,EAAOE,UAEzB,KAAKX,EAEH,IAAMY,EAAUJ,EAAMF,aAAaO,KAAI,SAACC,GACtC,MAAO,CACLC,OAAQD,EAAEC,OACVC,SAAS,GAAD,mBAAMF,EAAEE,UAAR,CAAkBP,EAAOE,cAIrC,OAAO,2BACFH,GADL,IAEEF,aAAcM,IAElB,KAAKZ,EACH,OAAO,2BACFQ,GADL,IAEEN,YAAaC,IAAOM,EAAOE,SAASN,OAAO,gBAE/C,QACE,OAAO,eAAKG,KF5BZS,EAAkBC,YAA6B,CACnDC,kBAAmBZ,IAaNa,EAFDC,YAAYJ,GARFlB,EAQkC,CAACuB,KAHlDC,IAAe,WAAf,cAAmBxB,MGPRyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,oGCVtBC,EAAuB,SAClCvB,GAEA,IAAMwB,EAAa,CACjBf,OAAQT,EAAaS,OACrBC,SAAUV,EAAaU,SAASH,KAAI,SAACC,GACnC,MAAO,CACLiB,QAAS5B,IAAOW,EAAEkB,WAAWC,IAAI,EAAG,SACpCC,UAAW/B,IAAOW,EAAEkB,WACpBG,MAAO,cAKb,OAAO1B,iBAAOT,EAAuB,CAAC8B,K,QCQzBM,EAnBE,SAACC,GAChB,IAAQtB,EAAWsB,EAAXtB,OACR,EAAwCuB,mBAAS,IAAIlC,MAArD,mBAAOmC,EAAP,KAAqBC,EAArB,KACMC,EAAWC,cAEjB,OACE,qCACE,wDAAyB3B,KACzB,cAAC,IAAD,CACE4B,MAAOJ,EACPK,SAAU,SAACC,GDOc,IAACC,ECNxBN,EAAgBK,GAChBJ,GDKwBK,ECLGD,EDKyCpC,iBAAOT,EAA2B8C,Y,kBEzBnGC,EAAcC,YAAH,inB,sECyFTC,EA1EK,WAClB,IAAMzC,EAAQ0C,aAAY,SAAC1C,GAAD,OAAwBA,EAAMW,qBACxD,EAAwCmB,mBAAgC,IAAxE,mBAAOhC,EAAP,KAAqB6C,EAArB,KACA,EAAwBb,oBAAkB,GAA1C,mBAAOc,EAAP,KAAaC,EAAb,KAEMZ,EAAWC,cAEjBY,qBAAU,WACJ9C,EAAMF,aAAaiD,OAAS,GAC9BJ,EAAgB3C,EAAMF,aAAa,GAAGU,YAEvC,CAACR,EAAMF,eAEV,IAAMkD,EAAqB,SAACX,GAC1B,IHPmCY,EGO/BC,GAAW,EAEa,IAAxBpD,EAAaiD,SACfG,EAAWpD,EAAaqD,MACtB,SAAC7C,GAAD,OACG+B,EAAEe,MAA8B1B,WAAapB,EAAEiB,SAC/Cc,EAAEe,MAA8B7B,SAAWjB,EAAEoB,cAIhDwB,EACFL,GAAQ,IAERA,GAAQ,GAERF,EAAgB,GAAD,mBAAK7C,GAAL,CAAmBuC,EAAEe,SACpCnB,GHvBiCgB,EGuBDZ,EAAEe,MHtBtCnD,iBAAOT,EAAyByD,OG0B1BI,EAAc,WAClBR,GAAQ,IAGV,OACE,mCACE,eAACS,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CACEX,KAAMA,EACNY,QAASH,EACTI,kBAAgB,qBAChBC,mBAAiB,2BAJnB,UAME,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAmBC,GAAG,2BAAtB,2EAIF,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,QAASX,EAAaY,MAAM,UAAUC,WAAS,EAAvD,uBAMJ,eAAC,IAAD,CAAWC,KAAMrE,EAAjB,UACE,cAAC,IAAD,CAAWJ,YAAaM,EAAMN,cAC9B,cAAC,IAAD,CAAc0E,gBAAiB,SAAC/B,GAAD,OAAOW,EAAmBX,IAAIgC,wBAAoBC,IACjF,cAAC,IAAD,IACA,cAAC,IAAD,CAASC,aAAc,EAAGC,WAAY,GAAIC,aAAc,KACxD,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,aCrEJC,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAASL,EAAMM,QAAQ,GACvBC,UAAW,SACXlB,MAAOW,EAAMQ,QAAQC,KAAKC,gBA6CjBC,EAxCH,WACV,IAAMC,EAAUd,IACVzC,EAAWC,cACjB,EAA4BJ,mBAAiB,IAA7C,mBAAOvB,EAAP,KAAekF,EAAf,KAEA3C,qBAAU,WACR4C,MACC,IAEH,IAAMA,EAAY,uCAAG,sBAAAC,EAAA,+EAEJC,MAAM,GAAD,OAAIC,sEAA6B,CACjDC,OAAQ,QAEPC,MAAK,SAACC,GAAD,OC1CgBC,ED0COD,GCzCtBE,GACJD,EAASE,OAEoB,MAApBF,EAASG,OAAiB,qBAAuB,mCAJxC,IAACH,KD2CrBF,MAAK,SAACM,GACLZ,EAAUY,EAAK9F,OAAO+F,MACtBrE,EAASZ,EAAqBgF,OARjB,wEAWjBE,QAAQC,MAAR,MAXiB,wDAAH,qDAelB,OACE,sBAAKC,UAAWjB,EAAQV,KAAxB,UACE,eAAC4B,EAAA,EAAD,CAAMC,WAAS,EAACzB,QAAS,EAAzB,UACE,cAACwB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAAC,EAAD,CAAUvG,OAAQA,MAEpB,cAACmG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,cAAC,EAAD,SAIJ,cAACvE,EAAD,Q,wCElDAqC,EAAQmC,YAAe,CAC3B3B,QAAS,CACPlF,KAAM,UAIV8G,IAASC,OACP,cAAC,IAAD,CAAUrG,MAAOA,EAAjB,SACE,eAACsG,EAAA,EAAD,CAAetC,MAAOA,EAAtB,UACE,cAACuC,EAAA,EAAD,IACA,cAAC,EAAD,SAGJC,SAASC,eAAe,SCvBxBC,IAAQ7F,MR8HJ,kBAAmB8F,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAC2B,GACLA,EAAaC,gBAEdC,OAAM,SAACpB,GACND,QAAQC,MAAMA,EAAMqB,c","file":"static/js/main.ccbe8e2e.chunk.js","sourcesContent":["import { combineReducers, applyMiddleware, createStore } from '@reduxjs/toolkit';\nimport thunk from 'redux-thunk';\nimport appointmentReducer from './appointments/reducer';\nimport { AppointmentsStore } from './appointments/type';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface GlobalState {\n  appointmentsState: AppointmentsStore;\n}\n\nconst combinedReducer = combineReducers<GlobalState>({\n  appointmentsState: appointmentReducer,\n});\n\nconst bindMiddleware = (middleware: any) => {\n  if (process.env.NODE_ENV !== 'production') {\n    const { composeWithDevTools } = require('redux-devtools-extension');\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n  return applyMiddleware(...middleware);\n};\n\nconst store = createStore(combinedReducer, bindMiddleware([thunk]));\n\nexport default store;\n","import moment from 'moment';\nimport { CalendarAppointment } from '../../interfaces/calendar-appointment';\nimport { MentorInfo } from '../../interfaces/mentor-info';\n\nexport const AppointmentsType = {\n  INIT: '@@APPOINTMENTS/INIT',\n  UPDATE: '@@APPOINTMENTS/UDPATE',\n  NEW_DATE: '@@APPOINTMENTS/NEW_DATE',\n};\n\nexport type AppointmentsStore = {\n  currentDate: string;\n  appointments: { mentor: MentorInfo; calendar: CalendarAppointment[] }[];\n};\n\nexport const APPOINTMENTS_INITIAL_STATE: AppointmentsStore = {\n  currentDate: moment(new Date()).format('YYYY-MM-DD'),\n  appointments: [],\n};\n","import moment from 'moment';\nimport { Reducer } from 'redux';\nimport { AppointmentsStore, AppointmentsType, APPOINTMENTS_INITIAL_STATE } from './type';\n\ntype AppointmentReducer = {\n  type: string;\n  payload?: any;\n};\n\nconst appointmentReducer: Reducer<AppointmentsStore> = (\n  state: AppointmentsStore = APPOINTMENTS_INITIAL_STATE,\n  action: AppointmentReducer,\n) => {\n  switch (action.type) {\n    case AppointmentsType.INIT:\n      return {\n        ...state,\n        appointments: action.payload,\n      };\n    case AppointmentsType.UPDATE:\n      //in the future needs to filter by mentor and then update the calendar\n      const updated = state.appointments.map((i) => {\n        return {\n          mentor: i.mentor,\n          calendar: [...i.calendar, action.payload],\n        };\n      });\n\n      return {\n        ...state,\n        appointments: updated,\n      };\n    case AppointmentsType.NEW_DATE:\n      return {\n        ...state,\n        currentDate: moment(action.payload).format('YYYY-MM-DD'),\n      };\n    default:\n      return { ...state };\n  }\n};\n\nexport default appointmentReducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import moment from 'moment';\nimport { action, PayloadAction } from 'typesafe-actions';\nimport { Appointments } from '../../interfaces/appointments';\nimport { CalendarAppointment } from '../../interfaces/calendar-appointment';\nimport { MentorInfo } from '../../interfaces/mentor-info';\nimport { AppointmentsType } from './type';\n\nexport const initAppointmentsList = (\n  appointments: Appointments,\n): PayloadAction<string, { mentor: MentorInfo; calendar: CalendarAppointment[] }[]> => {\n  const mappedData = {\n    mentor: appointments.mentor,\n    calendar: appointments.calendar.map((i) => {\n      return {\n        endDate: moment(i.date_time).add(1, 'hours'),\n        startDate: moment(i.date_time),\n        title: 'Booked',\n      };\n    }) as unknown as CalendarAppointment[],\n  };\n\n  return action(AppointmentsType.INIT, [mappedData]);\n};\n\nexport const updateAppointmentsList = (appointment: CalendarAppointment): PayloadAction<string, CalendarAppointment> =>\n  action(AppointmentsType.UPDATE, appointment);\n\nexport const updateCurrentDate = (date: Date): PayloadAction<string, Date> => action(AppointmentsType.NEW_DATE, date);\n","import React, { useState } from 'react';\nimport ReactCalendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport { useDispatch } from 'react-redux';\nimport { updateCurrentDate } from '../../store/appointments/action';\n\ntype Props = {\n  mentor: string;\n};\n\nconst Calendar = (props: Props) => {\n  const { mentor } = props;\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <h1>{`Appointments for ${mentor}`}</h1>\n      <ReactCalendar\n        value={selectedDate}\n        onChange={(e) => {\n          setSelectedDate(e);\n          dispatch(updateCurrentDate(e));\n        }}\n      />\n    </>\n  );\n};\n\nexport default Calendar;\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n    body {\n        font-family: 'Roboto',-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Oxygen', 'Ubuntu', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n        min-width: 360px;\n        min-height: 660px;\n        padding: 25px;\n\n\n        #root {\n            min-width: 360px;\n            min-height: 641px;\n        }\n\n        .MuiFormControlLabel-root {\n            display: none;\n        }\n\n        .MuiFilledInput-adornedEnd {\n            pointer-events: none;\n        }\n\n        .MuiIconButton-root:nth-child(2) {\n            display: none;\n        }\n    }\n`;\n","import React, { useEffect, useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {\n  Scheduler,\n  DayView,\n  Appointments,\n  AppointmentTooltip,\n  ConfirmationDialog,\n  AppointmentForm,\n} from '@devexpress/dx-react-scheduler-material-ui';\nimport { ChangeSet, EditingState, IntegratedEditing, ViewState } from '@devexpress/dx-react-scheduler';\nimport { CalendarAppointment } from '../../interfaces/calendar-appointment';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GlobalState } from '../../store/store';\nimport { updateAppointmentsList } from '../../store/appointments/action';\nimport { Dialog, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\n\nconst DayCalendar = () => {\n  const state = useSelector((state: GlobalState) => state.appointmentsState);\n  const [appointments, setAppointments] = useState<CalendarAppointment[]>([]);\n  const [open, setOpen] = useState<boolean>(false);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (state.appointments.length > 0) {\n      setAppointments(state.appointments[0].calendar);\n    }\n  }, [state.appointments]);\n\n  const updateAppointments = (e: ChangeSet) => {\n    let overlaps = false;\n\n    if (appointments.length !== 0) {\n      overlaps = appointments.some(\n        (i: CalendarAppointment) =>\n          (e.added as CalendarAppointment).startDate <= i.endDate &&\n          (e.added as CalendarAppointment).endDate >= i.startDate,\n      );\n    }\n\n    if (overlaps) {\n      setOpen(true);\n    } else {\n      setOpen(false);\n\n      setAppointments([...appointments, e.added as CalendarAppointment]);\n      dispatch(updateAppointmentsList(e.added as CalendarAppointment));\n    }\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Paper>\n        <Dialog\n          open={open}\n          onClose={handleClose}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              Time slot already allocated. Choose another one. Thank you.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"primary\" autoFocus>\n              Okay\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        <Scheduler data={appointments}>\n          <ViewState currentDate={state.currentDate} />\n          <EditingState onCommitChanges={(e) => updateAppointments(e)} editingAppointment={undefined} />\n          <IntegratedEditing />\n          <DayView startDayHour={0} endDayHour={24} cellDuration={60} />\n          <ConfirmationDialog />\n          <Appointments />\n          <AppointmentTooltip />\n          <AppointmentForm />\n        </Scheduler>\n      </Paper>\n    </>\n  );\n};\n\nexport default DayCalendar;\n","import React, { useEffect } from 'react';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nimport Calendar from './components/Calendar/Calendar';\n\nimport { GlobalStyle } from './styles';\nimport DayCalendar from './components/DayCalendar/DayCalendar';\nimport { Appointments } from './interfaces/appointments';\nimport { handleRequest } from './utils/handle-request';\nimport { initAppointmentsList } from './store/appointments/action';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  }),\n);\n\nconst App = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [mentor, setMentor] = useState<string>('');\n\n  useEffect(() => {\n    initCalendar();\n  }, []);\n\n  const initCalendar = async (): Promise<void> => {\n    try {\n      return await fetch(`${process.env.REACT_APP_API}`, {\n        method: 'GET',\n      })\n        .then((res) => handleRequest(res))\n        .then((list: Appointments) => {\n          setMentor(list.mentor.name);\n          dispatch(initAppointmentsList(list));\n        });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={4}>\n        <Grid item xs={12} md={2}>\n          <Calendar mentor={mentor} />\n        </Grid>\n        <Grid item xs={12} md={10}>\n          <DayCalendar />\n        </Grid>\n      </Grid>\n\n      <GlobalStyle />\n    </div>\n  );\n};\n\nexport default App;\n","export const handleRequest = (response: Response) => {\n  if (response.ok) {\n    return response.json();\n  } else {\n    const message = response.status === 404 ? 'Resource Not found' : 'An unexpected error has occurred';\n    return message;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store/store';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\nimport registerIcons from './registerFaIcons';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\nregisterIcons();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { library } from '@fortawesome/fontawesome-svg-core';\n\nexport default function registerIcons() {\n  library.add();\n}\n"],"sourceRoot":""}